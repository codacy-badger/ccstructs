\input texinfo.tex
@c %**start of header
@setfilename ccstructs.info
@settitle CCStructs
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CCStructs

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CCStructs

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           ccstructs

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2018

@c ------------------------------------------------------------

@set CCEXCEPTIONS_VERSION       0.7.2
@set CCMEMORY_VERSION           0.2.0
@set CCTESTS_VERSION            0.3.0

@set GITHUB_URL                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing common interface for C structs.

This package supports @posix{} platforms.  This package depends on the packages: CCExceptions, at
least version @value{CCEXCEPTIONS_VERSION}; CCMemory, at least version @value{CCMEMORY_VERSION}.  To
run the test suite: this package depends upon the package CCTests, at least version
@value{CCTESTS_VERSION}.

The package is distributed under the terms of the @gnu{} Lesser General Public License (@lgpl{}).

The latest release can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* ccstructs: (ccstructs).       Common interfaces for C structs.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* memory::                      Memory handling.
* utils::                       Utility definitions.

Appendices

* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing common interfaces for C structs.

This package supports @posix{} platforms.  This package depends on the packages: CCExceptions, at
least version @value{CCEXCEPTIONS_VERSION}; CCMemory, at least version @value{CCMEMORY_VERSION}.  To
run the test suite: this package depends upon the package CCTests, at least version
@value{CCTESTS_VERSION}.

@value{PACKAGE} installs the single header file @file{ccstructs.h}.  All the function names in the
@api{} are prefixed with @code{ccstructs_}; all the preprocessor symbol names are prefixed with
@code{CCSTRUCTS_}; all the type names are prefixed with @code{ccstructs_} and suffixed with
@code{_t}.

@menu
* overview linking::            Linking code with the library.
@end menu

@c page
@node overview linking
@section Linking code with the library


This package installs a data file for @command{pkg-config}, so when searching for the installed
library with the @gnu{} Autotools, we can add the following macro use to @file{configure.ac}:

@example
PKG_CHECK_MODULES([CCSTRUCTS],[ccstructs >= 0.1.0])
@end example

@noindent
which will set the variables @code{CCSTRUCTS_LIBS} and @code{CCSTRUCTS_CFLAGS}.  To avoid
problems with @command{pkg-config}, we need to remember that:

@itemize
@item
The macro file defining @code{PKG_CHECK_MODULES} is installed by the package @code{pkg-config}; such
file usually is in one of the locations:

@center @file{/usr/share/aclocal/pkg.m4}
@center @file{/usr/local/share/aclocal/pkg.m4}

@item
The macro file is located by @command{aclocal}, which in turn is installed by the package @gnu{}
Automake; @command{aclocal} is used by @command{autoreconf}.  We must make sure that
@command{aclocal} finds the installed macro files; for this purpose we can use the environment
variable @env{ACLOCAL_PATH}; under a Bourne shell we can do this with:

@example
export ACLOCAL_PATH=/usr/local/share/aclocal:/usr/share/aclocal
@end example
@end itemize

Alternatively we can use the raw @gnu{} Autoconf macros:

@example
AC_CHECK_LIB([ccstructs],[ccstructs_version_string],,
  [AC_MSG_FAILURE([test for CCStructs library failed])])
AC_CHECK_HEADERS([ccstructs.h],,
  [AC_MSG_FAILURE([test for CCStructs header failed])])
@end example

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} ccstructs_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing
the interface version number.
@end deftypefun


@deftypefun int ccstructs_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int ccstructs_version_interface_revision (void)
Return an integer representing the library interface current revision
number.
@end deftypefun


@deftypefun int ccstructs_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node memory
@chapter Memory handling


@menu
* memory blocks::               Memory blocks.
* memory ascii::                Handling @ascii{} strings.
@end menu

@c page
@node memory blocks
@section Memory blocks


This module offers a set of functions to handle memory blocks; its purpose is to provide a small
data structure (@code{ccstructs_block_t}) which can be used directly as argument to function and
return value from function, instead of the couple: pointer to memory block, block length in bytes.
All the functions are defined in the header @file{ccstructs.h} and declared as @code{__inline__}.


@deftp {Struct Typedef} ccstructs_block_t
The type of memory block; fields description follows:

@table @code
@item size_t len
The number of bytes in the block; can be zero.

@item uint8_t * ptr
Pointer to the memory block or @cnull{}.
@end table

To initialise a block to empty state do this:

@example
ccstructs_block_t     B = @{ .ptr = NULL, .len = 0 @};
@end example

@noindent
or this:

@example
ccstructs_block_t     B;
ccstructs_block_reset(&B);
@end example
@end deftp

@c ------------------------------------------------------------

@subsubheading Memory allocation


@deftypefun ccstructs_block_t ccstructs_block_alloc (ccstructs_memory_allocator_t @var{allocator}, size_t @var{dim})
@deftypefunx ccstructs_block_t ccstructs_block_realloc (ccstructs_memory_allocator_t @var{allocator}, ccstructs_block_t @var{block}, size_t @var{new_dim})
Allocate or reallocate a memory block using the @var{allocator} and
return the resulting block.
@end deftypefun


@deftypefun void ccstructs_block_free (ccstructs_memory_allocator_t @var{allocator}, ccstructs_block_t @var{block})
If the @code{ptr} field of @var{block} is not @cnull{}: free the
referenced memory block using @var{allocator}.
@end deftypefun


@subsubheading Setting

@deftypefun void ccstructs_block_set (ccstructs_block_t * @var{block}, void * @var{ptr}, size_t @var{len})
Set the fields of the block structure.
@end deftypefun


@deftypefun void ccstructs_block_reset (ccstructs_block_t * @var{block})
Reset to zero all the fields of the block.
@end deftypefun


@subsubheading Inspection


@deftypefun bool ccstructs_block_is_null (ccstructs_block_t @var{block})
Return true if the @code{ptr} field of @var{block} is @cnull{}.
@end deftypefun


@subsubheading Memory operations


@deftypefun void ccstructs_block_clean_memory (ccstructs_block_t @var{block})
Reset to zero all the bytes in the memory block.
@end deftypefun


@subsubheading Block operations


@deftypefun void ccstructs_block_shift_x (ccstructs_block_t * @var{block}, ssize_t @var{offset}, size_t @var{dim})
Shift the memory reference in @var{block} by @var{offset} slots each of
@var{dim} bytes.  @var{offset} can be zero, positive or negative.
@end deftypefun


@deftypefun ccstructs_block_t ccstructs_block_shift (ccstructs_block_t @var{block}, ssize_t @var{offset}, size_t @var{dim})
Like @cfunc{ccstructs_block_shift_x}, but produce a new block.
@end deftypefun


@deftypefun ccstructs_block_t ccstructs_block_difference (ccstructs_block_t @var{a}, ccstructs_block_t @var{b})
This function assumes that @var{b} is contiguous to or included in
@var{a}; return a new block @var{c} referencing the first portion of
@var{a} not in @var{b}.

@example
          @var{c}.len             @var{b}.len
  |.........................|.................|

@var{c}.ptr                     @var{b}.ptr
  v                         v
  |-------------------------|---------------------|
  ^
@var{a}.ptr

  |...............................................|
                       @var{a}.len

@end example
@end deftypefun

@c page
@node memory ascii
@section Handling @ascii{} strings


This module offers a set of functions to handle @ascii{} coded, zero
terminated strings; its purpose is to provide a small data structure
(@code{ccstructs_ascii_t}) which can be used directly as argument to function
and return value from function, instead of the couple: pointer to memory
block, block length in bytes.  All the functions are defined in the
header @file{ccstructs.h} and declared as @code{__inline__}.


@deftp {Struct Typedef} ccstructs_ascii_t
The type of zero--terminated @ascii{} strings; fields description
follows:

@table @code
@item size_t len
The number of characters in the block; can be zero; it does @strong{not}
include the terminating null character.

@item char * ptr
Pointer to the memory block or @cnull{}; the last @code{char} must be
zero.
@end table

To initialise an ascii to empty state do this:

@example
ccstructs_ascii_t     A = @{ .ptr = NULL, .len = 0 @};
@end example

@noindent
or this:

@example
ccstructs_ascii_t     A;
ccstructs_ascii_reset(&A);
@end example

@noindent
or this:

@example
ccstructs_ascii_t     A = ccstructs_ascii_empty;
@end example
@end deftp


@deftp {Struct Typedef} ccstructs_ascii_list_t
Holds an array of @code{char *}.  Fields:

@table @code
@item size_t len
the number of strings;
@item char ** ptr
the array of pointers.
@end table
@end deftp


@deftypevar {const ccstructs_ascii_t} ccstructs_ascii_empty
Represent an empty string.  It is a statically allocated structure,
referencing a zero--terminated empty string.
@end deftypevar


@deftypefun void ccstructs_ascii_set (ccstructs_ascii_t * @var{ascii}, void * @var{ptr}, size_t @var{len})
Initialise the fields of a structure.
@end deftypefun


@deftypefun void ccstructs_ascii_reset (ccstructs_ascii_t * @var{ascii})
Reset to zero the fields.
@end deftypefun


@deftypefun ccstructs_ascii_t ccstructs_ascii_const (char * @var{string})
Build and return a structure initialised with @var{string}.  The length
is determined with the standard @cfunc{strlen} function.
@end deftypefun


@deftypefun bool ccstructs_ascii_is_null (ccstructs_ascii_t @var{ascii})
Return true if the pointer field is set to @cnull{}.
@end deftypefun


@deftypefun ccstructs_bool_t ccstructs_ascii_is_terminated (ccstructs_ascii_t @var{ascii})
Return true if the string referenced by @var{ascii} is zero--terminated.
@end deftypefun


@deftypefun void ccstructs_ascii_clean_memory (ccstructs_ascii_t @var{ascii})
Reset the block of memory to zero bytes.
@end deftypefun


@deftypefun void ccstructs_ascii_terminate (ccstructs_ascii_t @var{ascii})
Make sure that the string referenced by @var{ascii} is zero--terminated.
@end deftypefun


@deftypefun ccstructs_block_t ccstructs_block_from_ascii (ccstructs_ascii_t @var{ascii})
Return a block initialised with the fields of an @ascii{} block.
@end deftypefun

@deftypefun ccstructs_ascii_t ccstructs_ascii_from_block (ccstructs_block_t @var{block})
Return an @ascii{} block initialised with the fields of a block.
@end deftypefun


@deftypefun ccstructs_ascii_t ccstructs_ascii_alloc (ccstructs_memory_allocator_t @var{allocator}, size_t @var{dim})
@deftypefunx ccstructs_ascii_t ccstructs_ascii_realloc (ccstructs_memory_allocator_t @var{allocator}, ccstructs_ascii_t @var{ascii}, size_t @var{new_dim})
Allocate or reallocate an @ascii{} block using @var{allocator};
@var{dim} and @var{new_dim} are the number of characters to be stored in
the block, with the @strong{exclusion} of the terminating zero.
@end deftypefun


@deftypefun void ccstructs_ascii_free (ccstructs_memory_allocator_t @var{allocator}, ccstructs_ascii_t @var{ascii})
If the @code{ptr} field of @var{ascii} is not @cnull{}: free the
referenced memory block using @var{allocator}.
@end deftypefun


@c page
@node utils
@chapter Utility definitions


@defmac CCSTRUCTS_PC (@var{POINTER_TYPE}, @var{POINTER_NAME}, @var{EXPRESSION})
Preprocessor macro used to define pointer variables initialised with a cast expression.  It expands
to:

@example
POINTER_TYPE * POINTER_NAME = (POINTER_TYPE *) (EXPRESSION)
@end example

For example, the macro use:

@example
CCSTRUCTS_PC(ccstructs_descriptor_test_failure_t, C, _C);
@end example

@noindent
expands into:

@example
ccstructs_descriptor_test_failure_t * C = \
   (ccstructs_descriptor_test_failure_t *) (_C);
@end example
@end defmac


@defmac CCSTRUCTS_UNUSED
Preprocessor macro that is meant to expand into an attribute declaration.  If the symbol
@code{__GNUC__} is defined, the expansion is:

@example
__attribute__((__unused__))
@end example

@noindent
otherwise the expansion is the empty string.
@end defmac

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest release of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
the package CCExceptions is available at:

@center @url{https://github.com/marcomaggi/ccexceptions/}

@noindent
the package CCMemory is available at:

@center @url{https://github.com/marcomaggi/ccmemory/}

@noindent
the package CCTests is available at:

@center @url{https://github.com/marcomaggi/cctests/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

